#!/usr/bin/python

# i3 config generator/switcher
# by Oliver Kraitschy
# http://okraits.de okraits@arcor.de

from os import path, getenv, listdir, system
from sys import argv

import argparse

# global variables

# paths
SYSTEM_THEME_PATH = "/usr/share/j4-make-config-git/themes"
THEME_PATH = ""
i3_PATH = ""
i3_BASECONFIG_PATH = ""
i3_CONFIG_PATH = ""
# variables for config processing
themes_list = {}
baselines_list = []
windowActive = False
barActive = False
windowText = ""
barText = ""
commandString = ""

def detectConfigDir():
	global i3_PATH
	if path.exists(getenv("HOME") + "/.i3/config.base"):
		i3_PATH = getenv("HOME") + "/.i3"
		return True
	if getenv("XDG_CONFIG_HOME") is not None:
		if path.exists(getenv("XDG_CONFIG_HOME") + "/i3/config.base"):
			i3_PATH = getenv("XDG_CONFIG_HOME") + "/i3"
			return True
	if path.exists(getenv("HOME") + "/.config/i3/config.base"):
		i3_PATH = getenv("HOME") + "/.config/i3"
		return True
	else:
		return False

def getThemeList():
	return "".join([
	"\nAvailable themes:\n",
	"=================\n",
	"\n".join(sorted(themes_list.keys())),
	"\n"
	])

if __name__ == "__main__":
	arg_parser = argparse.ArgumentParser(
	description="i3 config generator/switcher",
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog="""
	Usage examples:
	===============
	Create config file and include a specific theme:
	\tj4-make-config <theme-name>
	Create config file without including a theme:
	\tj4-make-config none
	Include a specific/no theme and restart i3 after creating the config file:
	\tj4-make-config -r <theme-name>|none
	Append additional configuration from files in the i3 config directory:
	\tj4-make-config -a <file-name> -a <another-file-name> <theme-name>|none
	Append additional configuration and restart i3 after creating the config file:
	\tj4-make-config -r -a <file-name> <theme-name>|none
	Run j4-make-config with the most recently used arguments:
	\tj4-make-config\n
	"""+getThemeList()
	)
	arg_parser.add_argument("theme_name", metavar="THEME_NAME",
	help="name of the theme that will be used")
	arg_parser.add_argument("-r", "--restart", action="store_true",
	dest="do_restart",
	help="restart i3 after generating config")
	arg_parser.add_argument("--reload", action="store_true", dest="do_reload",
	help="let i3 reload config after generating it")
	arg_parser.add_argument("-a", "--append", dest="append_files", default=[],
	action="append",
	help="append additional configuration from files in the i3 config directory")

	# detect i3 configuration directory
	if not detectConfigDir():
		print("Error: i3 base config file could not be found.")
		exit(1)
	else:
		# set paths
		THEME_PATH = i3_PATH + "/themes"
		i3_BASECONFIG_PATH = i3_PATH + "/config.base"
		i3_CONFIG_PATH = i3_PATH + "/config"
		# fill themes dictionary with names and paths
		try:
			if path.exists(SYSTEM_THEME_PATH):
				for theme in listdir(SYSTEM_THEME_PATH):
					themes_list[theme] = SYSTEM_THEME_PATH + "/" + theme
			if path.exists(THEME_PATH):
				for theme in listdir(THEME_PATH):
					themes_list[theme] = THEME_PATH + "/" + theme
		except (IOError, OSError):
			print("Error: No themes found.")
			exit(1)
	
	# check for possible cli arguments
	# -h / --help
	# <theme-name>
	# -r
	# -a <file-name>
	if (len(argv) == 1):
		# no arguments given, use commandstring from rc file
		if path.exists(getenv("HOME") + "/.j4-make-config.rc"):
			try:
				rcfile = open(getenv("HOME") + "/.j4-make-config.rc", "r")
			except IOError:
				print("Error: file %s could not be opened." % (getenv("HOME") + "/.j4-make-config.rc"))
				exit(1)
			commandString = rcfile.read()
			rcfile.close()
			print("Executing: " + commandString)
			retval = system(commandString)
			exit(retval)
		else:
			print("Error: file %s does not exist yet." % (getenv("HOME") + "/.j4-make-config.rc"))
			exit(1)
	else:
		args = arg_parser.parse_args()
	
	# we must not include a theme in the config file
	noTheme = False
	if args.theme_name == "none":
		noTheme = True
	
	if not noTheme:
		# try to open given filename
		try:
			themefile = open(themes_list[args.theme_name], "r")
		except (KeyError, IOError):
			print("Error: theme %s does not exist." % args.theme_name)
			print(getThemeList())
			exit(1)
		
		# read themefile, create section strings
		for line in themefile:
			if "$i3-theme-window" in line:
				windowActive = True
				barActive = False
			elif "$i3-theme-bar" in line:
				windowActive = False
				barActive = True
			else:
				if windowActive and not barActive:
					windowText += line
				elif not windowActive and barActive:
					barText += line
		themefile.close()
	
	# try to open i3 base config file
	try:
		basefile = open(i3_BASECONFIG_PATH, "r")
	except IOError:
		print("Error: i3 base config file could not be opened.")
		exit(1)
	# read all lines of base config into list
	baselines_list.extend(basefile.readlines())
	basefile.close()
	
	# append all additional configuration files
	for appendFilename in args.append_files:
		try:
			appendFile = open(i3_PATH + "/" + appendFilename, "r")
		except IOError:
			print("Error: file %s could not be opened." % appendFilename)
			exit(1)
		# read all lines of appendFile into list
		baselines_list.extend(appendFile.readlines())
		appendFile.close()
	
	# try to open i3 config file
	try:
		configfile = open(i3_CONFIG_PATH, "w")
	except IOError:
		print("Error: i3 config file could not be created.")
		exit(1)
	
	# iterate over base config lines, write all to config file
	# and insert theme config at the right place
	for line in baselines_list:
		if "$i3-theme-window" in line:
			if not noTheme:
				configfile.write(windowText)
		elif "$i3-theme-bar" in line:
			if not noTheme:
				configfile.write(barText)
		else:
			configfile.write(line)
	configfile.flush()
	configfile.close()

	if args.do_restart:
		system("i3-msg restart")
  elif args.do_reload:
		system("i3-msg reload")
	
	# store commandstring in rc file
	commandString = ' '.join(argv)
	try:
		rcfile = open(getenv("HOME") + "/.j4-make-config.rc", "w")
	except IOError:
		print("Error: file %s could not be opened." % (getenv("HOME") + "/.j4-make-config.rc"))
		exit(1)
	rcfile.write(commandString)
	rcfile.flush()
	rcfile.close()
	
	exit(0)
